#include <bits/stdc++.h>
using namespace std;

const int INF = 1e9;

// Функция для решения задачи коммивояжёра
int tsp(const vector<vector<int>>& dist) {
    int n = dist.size();
    int N = 1 << n; // количество возможных подмножеств вершин

    // dp[mask][i] = минимальная стоимость пути, который проходит по вершинам из mask и заканчивается в i
    vector<vector<int>> dp(N, vector<int>(n, INF));

    dp[1][0] = 0; // начинаем из вершины 0

    for (int mask = 1; mask < N; mask++) {
        for (int u = 0; u < n; u++) {
            if (!(mask & (1 << u))) continue; // вершина u не входит в подмножество

            for (int v = 0; v < n; v++) {
                if (mask & (1 << v)) continue; // вершина v уже посещена
                if (dist[u][v] == INF) continue;

                int nextMask = mask | (1 << v);
                dp[nextMask][v] = min(dp[nextMask][v], dp[mask][u] + dist[u][v]);
            }
        }
    }

    // Возврат в начальную вершину (0)
    int ans = INF;
    for (int i = 1; i < n; i++) {
        if (dist[i][0] == INF) continue;
        ans = min(ans, dp[N - 1][i] + dist[i][0]);
    }

    return ans;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cout << "Введите количество городов: ";
    cin >> n;

    vector<vector<int>> dist(n, vector<int>(n));

    cout << "Введите матрицу расстояний (" << n << "x" << n << "):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> dist[i][j];
        }
    }

    int result = tsp(dist);

    cout << "\nМинимальная длина пути: " << result << "\n";

    return 0;
}
