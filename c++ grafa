// bfs_dfs.cpp
#include <bits/stdc++.h>
using namespace std;

struct Graph {
    int n;
    vector<vector<int>> adj;
    Graph(int n): n(n), adj(n) {}

    void addEdge(int u, int v, bool directed=false) {
        adj[u].push_back(v);
        if (!directed) adj[v].push_back(u);
    }

    vector<int> bfs(int start) {
        vector<int> dist(n, -1);
        queue<int> q;
        dist[start] = 0;
        q.push(start);
        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (int v : adj[u]) {
                if (dist[v] == -1) {
                    dist[v] = dist[u] + 1;
                    q.push(v);
                }
            }
        }
        return dist;
    }

    void dfsUtil(int u, vector<int>& visited, vector<int>& order) {
        visited[u] = 1;
        order.push_back(u);
        for (int v : adj[u]) if (!visited[v]) dfsUtil(v, visited, order);
    }

    vector<int> dfs(int start) {
        vector<int> visited(n, 0), order;
        dfsUtil(start, visited, order);
        return order;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    // Пример ввода:
    // n m
    // m строк: u v  (0-based)
    int n, m;
    if (!(cin >> n >> m)) return 0;
    Graph g(n);
    for (int i = 0; i < m; ++i) {
        int u, v; cin >> u >> v;
        g.addEdge(u, v, false);
    }
    int start = 0;
    auto dist = g.bfs(start);
    cout << "BFS distances from " << start << ":\n";
    for (int i = 0; i < n; ++i) cout << i << ": " << dist[i] << "\n";

    auto order = g.dfs(start);
    cout << "DFS order from " << start << ":\n";
    for (int v : order) cout << v << " ";
    cout << "\n";
    return 0;
}
